When would you want to use a remote repository rather than keeping all your work
local?

    I'd use a remote when working with other people, create a backup of the
    repo, or just want to publish my code.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    If Git always pulled automatically, there's a chance that commits from the
    remote conflict with my local changes, before I'm ready to review changes
    between the local and the remote repos.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are like a fancy way of cloning repos within GitHub. On a forked repo,
    a link to the original is present. Forks are useful when we want to
    contribute to a repo we don't have write access to.

    Clones are copies of a repo. These are useful when working with other
    people, since we can clone from a "master" repo, then make our own
    independent changes to it.

    Branches are pointers or labels to a particular commit history. These are
    completely local. We use this when we want to work on a new feature, or fix
    a bug, or play around with the files.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    We can work offline, and comparing out changes to that won't ever require
    an internet connection.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I'd send a copy of the project to my collaborators. If they made a change,
    they'll have to inform me of what changed, and compare it manually with my
    copy of the project. I don't think this is a problem if a project is
    reasonably small, but it can be a mess once there are lots of files
    involved.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    I'd want to make changes in a separate branch when I'm working on a new
    feature, or fix an existing bug, or reformat the code. One advantage it has
    is that our changes are isolated from the working master branch (which is
    expected to behave as expected). Then out changes are reviewed, then merged
    into the master branch when it's safe to do so, or add more follow-up
    commits, all while maintaining the purity of the master branch.
